import numpy as np

def get_snr(domain, asd, strain_data, duration = 8.0):
    """
    Given an injection generated by Injection.injection or Injection.random_injection 
    will return snr of the injection in the two detectors

    Returns
    -------
    dict
        keys:
            detector: data (signal + noise) in each detector
    """
    snrs = {k:None for k in strain_data["waveform"].keys()}
    freq_snr_squared = {k:None for k in strain_data["waveform"].keys()}

    for ifo_name, ifo_signal in strain_data["waveform"].items():

        integrand = (np.conj(ifo_signal) * ifo_signal) / ((asd[ifo_name] ** 2) * domain.window_factor)
        freq_snr_squared[ifo_name] = (4 / duration) * integrand
        snrs[ifo_name] = ((4 / duration) * np.sum(integrand)) ** 0.5

    network_snr = np.sqrt(sum([snrs[ifo_name] ** 2 for ifo_name in strain_data["waveform"].keys()]))
    return snrs, freq_snr_squared, network_snr

def get_snr_bilby(domain, asd, strain_data, duration=8.0):
    from bilby.gw.detector import PowerSpectralDensity
    from bilby.gw.detector import InterferometerList

    ifos = InterferometerList(["H1", "L1"])
    ifos.time_duration = duration
    bilby_snr = 0
    for ifo in ifos:
        asd_array = asd[ifo.name]
        # This step is actually very important
        asd_array = asd_array.astype("float64")
        x_freq = domain.sample_frequencies.astype("float64")
        psd = PowerSpectralDensity(frequency_array=x_freq, asd_array=asd_array)
        ifo.power_spectral_density = psd
        # Making sure we aren't dropping anything due to precision
        assert np.min(asd_array**2) > 0
        ifo.set_strain_data_from_frequency_domain_strain(strain_data["waveform"][ifo.name], frequency_array=x_freq)
        ifo.strain_data.window_factor = domain.window_factor
        bilby_snr += ifo.optimal_snr_squared(signal=strain_data['waveform'][ifo.name])

    return bilby_snr ** 0.5

def effective_spin(chi_1, chi_2, mass_ratio):
    a = chi_1 +  mass_ratio * chi_2
    b = 1 + mass_ratio
    return a / b
